name: Security Updates and Dependency Check

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull latest image for scanning
      run: |
        # Pull the latest image from registry for security scanning
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || echo "No existing image found"

    - name: Build fresh image for comparison
      run: |
        echo "Building fresh Docker image for security scanning..."
        docker build -t kali-ai-agent:fresh \
          --build-arg SSH_PASSWORD=${{ secrets.SSH_PASSWORD || 'defaultpassword' }} .

        echo "Verifying built image..."
        docker images kali-ai-agent:fresh
        echo "Image info:"
        docker inspect kali-ai-agent:fresh --format='{{.Size}} bytes, created: {{.Created}}'

    - name: Run comprehensive security scan
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: kali-ai-agent:fresh
        format: 'sarif'
        output: 'trivy-security-scan.sarif'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true

    - name: Install jq for JSON processing
      run: |
        echo "Installing jq for better JSON parsing..."
        # jq is often pre-installed in GitHub Actions runners, but let's make sure
        if ! command -v jq &> /dev/null; then
          echo "jq not found, installing..."
          # For Ubuntu runners, jq should be available via apt
          apt-get update && apt-get install -y jq
        else
          echo "jq is already available"
        fi

    - name: Check if SARIF file was created
      run: |
        echo "Checking if SARIF file exists..."
        if [ -f "trivy-security-scan.sarif" ]; then
          echo "✓ SARIF file created successfully"
          ls -la trivy-security-scan.sarif
          echo "File size:"
          wc -l trivy-security-scan.sarif

          # Show first few lines to verify SARIF format
          echo "First 10 lines of SARIF file:"
          head -10 trivy-security-scan.sarif
        else
          echo "✗ SARIF file not found"
          echo "Creating empty SARIF file for compatibility..."
          cat > trivy-security-scan.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "version": "0.45.0",
                    "informationUri": "https://github.com/aquasecurity/trivy"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
        fi

    - name: Run Docker Scout security analysis
      if: github.event_name == 'workflow_dispatch'
      run: |
        # Install Docker Scout CLI
        curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --

        # Analyze the image
        docker scout cves kali-ai-agent:fresh || echo "Scout analysis completed"

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-security-scan.sarif'

    - name: Check for base image updates
      run: |
        echo "Checking for Kali Linux base image updates..."
        # Pull the latest Kali image to compare
        docker pull kalilinux/kali-rolling:latest

        # Get image digests for comparison
        echo "Base image digest:"
        docker inspect kalilinux/kali-rolling:latest --format='{{index .RepoDigests 0}}'

        echo "Current image is based on:"
        docker inspect kali-ai-agent:fresh --format='{{index .Config.Labels "org.opencontainers.image.base.name"}}'

    - name: Generate security report
      if: always()
      run: |
        echo "## Security Scan Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Image**: kalilinux/kali-rolling" >> $GITHUB_STEP_SUMMARY
        echo "- **Scanner**: Trivy" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f "trivy-security-scan.sarif" ]; then
          echo "Analyzing SARIF file for vulnerabilities..." >> $GITHUB_STEP_SUMMARY

          # Count vulnerabilities by severity using a more robust method
          if command -v jq &> /dev/null; then
            # Use jq if available for better JSON parsing
            CRITICAL_COUNT=$(jq '[.runs[].results[]? | select(.properties."security-severity" == "9.0" or .properties."security-severity" == "critical")] | length' trivy-security-scan.sarif 2>/dev/null || echo "0")
            HIGH_COUNT=$(jq '[.runs[].results[]? | select(.properties."security-severity" == "7.0" or .properties."security-severity" == "high")] | length' trivy-security-scan.sarif 2>/dev/null || echo "0")
            MEDIUM_COUNT=$(jq '[.runs[].results[]? | select(.properties."security-severity" == "5.0" or .properties."security-severity" == "medium")] | length' trivy-security-scan.sarif 2>/dev/null || echo "0")
          else
            # Fallback to grep method
            CRITICAL_COUNT=$(grep -o '"severity"[[:space:]]*:[[:space:]]*"CRITICAL"' trivy-security-scan.sarif | wc -l)
            HIGH_COUNT=$(grep -o '"severity"[[:space:]]*:[[:space:]]*"HIGH"' trivy-security-scan.sarif | wc -l)
            MEDIUM_COUNT=$(grep -o '"severity"[[:space:]]*:[[:space:]]*"MEDIUM"' trivy-security-scan.sarif | wc -l)
          fi

          echo "### Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          echo "- 🔴 Critical: $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- 🟠 High: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- 🟡 Medium: $MEDIUM_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add scan status
          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo "⚠️ **Action Required**: High or critical vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Good**: No high or critical vulnerabilities found." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Warning**: No SARIF file found for vulnerability analysis." >> $GITHUB_STEP_SUMMARY
        fi

        echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
        echo "- Review scan results in the Security tab" >> $GITHUB_STEP_SUMMARY
        echo "- Update base image regularly to get security patches" >> $GITHUB_STEP_SUMMARY
        echo "- Consider using distroless images for production if appropriate" >> $GITHUB_STEP_SUMMARY

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check for Dockerfile updates
      run: |
        echo "Checking if Dockerfile needs updates..."
        # This could be enhanced to check for specific package versions
        # and suggest updates based on security advisories

    - name: Check for Python dependency updates
      run: |
        echo "Checking Python dependencies..."
        # If you have a requirements.txt file, this could check for outdated packages
        if [ -f "requirements.txt" ]; then
          echo "requirements.txt found - consider adding dependency checking"
        fi
