name: Security Updates and Dependency Check

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull latest image for scanning
      run: |
        # Pull the latest image from registry for security scanning
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || echo "No existing image found"

    - name: Build fresh image for comparison
      run: |
        docker build -t kali-ai-agent:fresh \
          --build-arg SSH_PASSWORD=${{ secrets.SSH_PASSWORD || 'defaultpassword' }} .

    - name: Run comprehensive security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: kali-ai-agent:fresh
        format: 'sarif'
        output: 'trivy-security-scan.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Run Docker Scout security analysis
      if: github.event_name == 'workflow_dispatch'
      run: |
        # Install Docker Scout CLI
        curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --

        # Analyze the image
        docker scout cves kali-ai-agent:fresh || echo "Scout analysis completed"

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-security-scan.sarif'

    - name: Check for base image updates
      run: |
        echo "Checking for Kali Linux base image updates..."
        # Pull the latest Kali image to compare
        docker pull kalilinux/kali-rolling:latest

        # Get image digests for comparison
        echo "Base image digest:"
        docker inspect kalilinux/kali-rolling:latest --format='{{index .RepoDigests 0}}'

        echo "Current image is based on:"
        docker inspect kali-ai-agent:fresh --format='{{index .Config.Labels "org.opencontainers.image.base.name"}}'

    - name: Generate security report
      if: always()
      run: |
        echo "## Security Scan Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Image**: kalilinux/kali-rolling" >> $GITHUB_STEP_SUMMARY
        echo "- **Scanner**: Trivy" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f "trivy-security-scan.sarif" ]; then
          # Count vulnerabilities by severity
          CRITICAL_COUNT=$(grep -o '"severity":"CRITICAL"' trivy-security-scan.sarif | wc -l)
          HIGH_COUNT=$(grep -o '"severity":"HIGH"' trivy-security-scan.sarif | wc -l)
          MEDIUM_COUNT=$(grep -o '"severity":"MEDIUM"' trivy-security-scan.sarif | wc -l)

          echo "### Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸ”´ Critical: $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸŸ  High: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸŸ¡ Medium: $MEDIUM_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
        echo "- Review scan results in the Security tab" >> $GITHUB_STEP_SUMMARY
        echo "- Update base image regularly to get security patches" >> $GITHUB_STEP_SUMMARY
        echo "- Consider using distroless images for production if appropriate" >> $GITHUB_STEP_SUMMARY

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check for Dockerfile updates
      run: |
        echo "Checking if Dockerfile needs updates..."
        # This could be enhanced to check for specific package versions
        # and suggest updates based on security advisories

    - name: Check for Python dependency updates
      run: |
        echo "Checking Python dependencies..."
        # If you have a requirements.txt file, this could check for outdated packages
        if [ -f "requirements.txt" ]; then
          echo "requirements.txt found - consider adding dependency checking"
        fi
